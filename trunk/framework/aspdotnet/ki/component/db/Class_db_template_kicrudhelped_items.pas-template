unit Class_db_template_kicrudhelped_items;

interface

uses
  Class_db,
  Class_db_trail;

type
  TClass_db_template_kicrudhelped_items = class(TClass_db)
  private
    db_trail: TClass_db_trail;
  public
    constructor Create;
    function Bind
      (
      partial_ki_crud_helper_user_key: string;
      target: system.object
      )
      : boolean;
    procedure BindDirectToListControl(target: system.object);
    function Delete(ki_crud_helper_user_key: string): boolean;
    function Get
      (
//<KiCrudHelper:GetDefinition/>
      )
      : boolean;
    procedure &Set
      (
//<KiCrudHelper:SetDefinition/>
      );
  end;

implementation

uses
  mysql.data.mysqlclient,
  system.web.ui.webcontrols;

constructor TClass_db_template_kicrudhelped_items.Create;
begin
  inherited Create;
  // TODO: Add any constructor code here
  db_trail := TClass_db_trail.Create;
end;

function TClass_db_template_kicrudhelped_items.Bind
  (
  partial_ki_crud_helper_user_key: string;
  target: system.object
  )
  : boolean;
var
  dr: mysqldatareader;
begin
  self.Open;
  ListControl(target).items.Clear;
  //
  dr := mysqlcommand.Create
    (
    'SELECT ki_crud_helper_user_key FROM template_kicrudhelped_item WHERE ki_crud_helper_user_key like "' + partial_ki_crud_helper_user_key + '%" order by ki_crud_helper_user_key',
    connection
    )
    .ExecuteReader;
  while dr.Read do begin
    ListControl(target).Items.Add
      (listitem.Create(dr['ki_crud_helper_user_key'].tostring,dr['ki_crud_helper_user_key'].tostring));
  end;
  dr.Close;
  self.Close;
  Bind := ListControl(target).items.count > 0;
end;

procedure TClass_db_template_kicrudhelped_items.BindDirectToListControl(target: system.object);
var
  dr: mysqldatareader;
begin
  self.Open;
  ListControl(target).items.Clear;
  //
  dr := mysqlcommand.Create('SELECT id,ki_crud_helper_user_key FROM template_kicrudhelped_item order by ki_crud_helper_user_key',connection).ExecuteReader;
  while dr.Read do begin
    ListControl(target).Items.Add
      (listitem.Create(dr['ki_crud_helper_user_key'].tostring,dr['id'].tostring));
  end;
  dr.Close;
  self.Close;
end;

function TClass_db_template_kicrudhelped_items.Delete(ki_crud_helper_user_key: string): boolean;
begin
  //
  Delete := TRUE;
  //
  self.Open;
  try
    mysqlcommand.Create(db_trail.Saved('delete from template_kicrudhelped_item where ki_crud_helper_user_key = ' + ki_crud_helper_user_key),connection).ExecuteNonquery;
  except on e: exception do
    if e.message.StartsWith('Cannot delete or update a parent row: a foreign key constraint fails',TRUE,nil) then begin
      Delete := FALSE;
    end else begin
      raise e;
    end;
  end;
  self.Close;
end;

function TClass_db_template_kicrudhelped_items.Get
  (
//<KiCrudHelper:GetDefinition/>
  )
  : boolean;
var
  dr: mysqldatareader;
begin
  Get := FALSE;
  self.Open;
  dr := mysqlcommand.Create('select * from template_kicrudhelped_item where CAST(ki_crud_helper_user_key AS CHAR) = "' + ki_crud_helper_user_key + '"',connection).ExecuteReader;
  if dr.Read then begin
    //
//<KiCrudHelper:DbGetBody/>
    //
    Get := TRUE;
    //
  end;
  dr.Close;
  self.Close;
end;

procedure TClass_db_template_kicrudhelped_items.&Set
  (
//<KiCrudHelper:SetDefinition/>
  );
//
// If any fields in this table are foreign keys for a subordinate table:
// a. Uncomment the "//1" lines.
// b. Customize the SQL as indicated by {bracketed comments}.
//
//1 var
//1   childless_field_assignments_clause: string;
begin
  //
//1  childless_field_assignments_clause := // {Move childless field assignments here.}
  //
  self.Open;
  mysqlcommand.Create
    (
    db_trail.Saved
      (
//1      'insert template_kicrudhelped_item'
//1      + ' set // {Move parent field assignments here.}
//1      + ' , ' + childless_field_assignments_clause
//1      + ' on duplicate key update '
//1      + childless_field_assignments_clause
      'replace template_kicrudhelped_item'
//<KiCrudHelper:DbSetBody/>
      ),
    connection
    )
    .ExecuteNonquery;
  self.Close;
  //
end;

end.
